package analizadores;

import java_cup.runtime.*;
import arbol.AST;
import arbol.Expresion;
import arbol.Instruccion;
import arbol.entorno.*;
import arbol.entorno.Tipo.EnumTipo;
import arbol.expresiones.Id;
import arbol.expresiones.Literal;
import arbol.instrucciones.Asignacion;
import arbol.instrucciones.Declaracion;
import arbol.instrucciones.Imprimir;
import arbol.aritmetica.*;
import arbol.instrucciones.*;
import arbol.Logicas.*;
import arbol.Comparativas.*;
import arbol.Sentencias.*;
import java.util.LinkedList;
import javafx.scene.text.Text;
import GUI.EditorController;
import arbol.instrucciones.*;


parser code 
{:   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            Text texto = new Text("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".\n");
            EditorController.imprimir(texto);
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

            //Interfaz.lista_errores.add(new CError("Sintáctico", "No se esperaba este componente '" + s.value + "'", s.left, s.right));
    
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            Text texto = new Text("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido. \n");
            EditorController.imprimir(texto);
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

terminal String mas,menos,por,division,parizquierdo,parderecho,igual,puntoycoma,llaveizq,llaveder,rint,rdouble,rchar,rboolean,rstring,rclass,coma,rvoid;
terminal String entero,doble,rtrue,rfalse,cadena,caracter,id,rprintln,rprint,rprinttabla;
terminal String menorque,mayorque,menorigualque,mayorigualque,igualigual,diferenteque,ror,rand,rxor,rnot,rif,relse,rwhile,rbreak,rcontinue,modulo,rfor,rdo,rswitch,rcase,rdefault,dospuntos,interrogacion,masmas,menosmenos,rpow,rreturn,corizquierdo,corderecho,rnew,rpublic,rprotected,rprivate,rabstract,rstatic,rfinal,rstr,rtoDouble,rtoInt,rtoChar,rextends,punto,rthis,rnull,rimport,
rgraph,rsuper,rread_file,rwrite_file,rinstanceof,rread,rgraphent,rgraphdot;

terminal umenos; //Para manejar el - E

non terminal INICIO;
non terminal LinkedList<Instruccion> L_INSTRUCCIONES;
non terminal Instruccion INSTRUCCION,DECLARACION,ASIGNACION, IMPRIMIR, INCREMENTO, DECREMENTO, GRAFICAR_DOT, GRAFICAR_ENT, SENTENCIA_IF;
non terminal Instruccion SENTENCIA_WHILE, SENTENCIA_SWITCH, SENTENCIA_DO_WHILE, SENTENCIA_IMPORT, SENTENCIA_BREAK;
non terminal LinkedList<Condiciones> L_CONDICIONES;
non terminal LinkedList<Bloque>L_BLOQUE;
non terminal Bloque BLOQUE;
non terminal BloqueSwitch BLOQUE_SWITCH;
non terminal Expresion E;
non terminal Expresion OP_COMPA, OP_LOGICA;
non terminal Tipo T;
non terminal Caso CASO;
non terminal LinkedList<Casos> CASOS;


//Operaciones numericas
//precedence left interrogacion; //Así lo tenía antes
precedence right interrogacion,dospuntos;


precedence left ror;
precedence left rand;
precedence left rxor;
precedence right rnot;

precedence left menorque,menorigualque,mayorque,mayorigualque,igualigual,diferenteque;

precedence left mas,menos;
precedence left por,division,modulo;
precedence left rpow;
precedence left masmas,menosmenos; //Así lo tenía antes

precedence left punto; //Para los accesos

precedence left umenos;

start with INICIO; 

INICIO::= L_INSTRUCCIONES:a
    {:
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    parser.AST = new AST(a);
        
    :}
;


L_INSTRUCCIONES ::= L_INSTRUCCIONES:a INSTRUCCION:b {: RESULT=a; RESULT.add(b); :}
                            | INSTRUCCION:a {: RESULT=new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= DECLARACION:a puntoycoma {: RESULT = a; :}
            | ASIGNACION:a puntoycoma {: RESULT = a; :}
            | IMPRIMIR:a puntoycoma{: RESULT = a; :}
            | INCREMENTO:a puntoycoma{: RESULT = a; :}
            | DECREMENTO:a puntoycoma{: RESULT = a; :}
            | GRAFICAR_DOT:a puntoycoma {: RESULT = a;:}
            | GRAFICAR_ENT:a puntoycoma {: RESULT = a;:}
            | SENTENCIA_IF:a {:RESULT=a;:}
            | SENTENCIA_WHILE:a {:RESULT=a;:}
            | SENTENCIA_DO_WHILE:a {:RESULT=a;:}
            | SENTENCIA_IMPORT:a {:RESULT=a;:}
            | SENTENCIA_SWITCH:a {:RESULT=a;:}
            | SENTENCIA_BREAK:a{:RESULT=a;:}
;


SENTENCIA_BREAK::= rbreak puntoycoma {:RESULT=new Break();:}
;
SENTENCIA_IF ::= L_CONDICIONES:a relse BLOQUE:b {:RESULT=new IF(a,b);:}
                |L_CONDICIONES:a {:RESULT=new IF(a);:}
;

SENTENCIA_WHILE ::= rwhile parizquierdo E:a parderecho BLOQUE:b {:RESULT=new While(a,b);:}
;

SENTENCIA_DO_WHILE::= 
        rdo BLOQUE:b rwhile parizquierdo E:a parderecho puntoycoma {:RESULT=new DoWhile(a,b);:}
;

SENTENCIA_IMPORT ::=

        rimport parizquierdo E:a parderecho puntoycoma {:RESULT=new Import(aleft, a);:}
;
SENTENCIA_SWITCH::= rswitch parizquierdo E:a parderecho llaveizq CASOS:b llaveder{: RESULT= new Switch(a,b,aleft,bleft); :}
        ;

CASOS::= CASOS:a CASO:b {: RESULT=a; RESULT.add(new Casos(b));:}
    | CASO:a {: RESULT=new LinkedList<>(); RESULT.add(new Casos(a)); :}
    ;

CASO::= rcase E:b dospuntos BLOQUE_SWITCH:c {: RESULT=new Caso(b,c,bleft,bright);:}
    | rdefault dospuntos BLOQUE_SWITCH:a  {: RESULT=new Caso(a,aleft,aright); :}
;

BLOQUE_SWITCH ::= {:RESULT=new BloqueSwitch();:}
        | L_INSTRUCCIONES:a {:RESULT=new BloqueSwitch(a);:}
;

BLOQUE ::= llaveizq llaveder {:RESULT=new Bloque();:}
        | llaveizq L_INSTRUCCIONES:a llaveder {:RESULT=new Bloque(a);:}
;

DECLARACION ::= 
        T:a id:b igual E:c {: RESULT = new Declaracion(a,b,c,bleft, bright); :}
        | T:a id:b {: RESULT=new Declaracion(a,b,bleft, bright); :}
        
        
;

L_CONDICIONES ::= 
        L_CONDICIONES:a relse rif parizquierdo E:b parderecho BLOQUE:c {:RESULT=a; RESULT.add(new Condiciones(b,c));:}
        |rif parizquierdo E:a parderecho BLOQUE:b {:RESULT=new LinkedList<>(); RESULT.add(new Condiciones(a,b));:}
;

ASIGNACION ::= 
                id:a igual E:b {: RESULT = new Asignacion(a,aleft,aright,b); :}
                //| id:a L_DIMENSIONES_EXPRESION:b igual E:c {: RESULT = new AsignacionArreglo(a,aleft,aright,b,c); :}
                
;

T ::= rint:a {: RESULT = new Tipo(Tipo.EnumTipo.entero); :}
    | rchar {: RESULT = new Tipo(Tipo.EnumTipo.caracter); :}
    | rboolean {: RESULT = new Tipo(Tipo.EnumTipo.booleano); :}
    | rdouble {: RESULT = new Tipo(Tipo.EnumTipo.doble); :}
    | rstring {: RESULT = new Tipo(Tipo.EnumTipo.cadena); :}
;

IMPRIMIR ::= rprintln parizquierdo E:a parderecho {: RESULT=new Imprimir(a, true); :}
    | rprint parizquierdo E:a parderecho {: RESULT=new Imprimir(a, false); :}

;

INCREMENTO ::= id:a masmas {: RESULT=new Incre(a,aright,aleft);:}
;

DECREMENTO ::= id:a menosmenos {: RESULT = new Decre(a,aright,aleft);:}
;


GRAFICAR_DOT ::= 
            rgraphdot parizquierdo E:a coma E:b parderecho {:RESULT = new GrafDot(aright,aleft,a,b);:}
;

GRAFICAR_ENT ::=
            rgraphent parizquierdo parderecho {:RESULT = new GrafEntornos();:}
;



E ::= 
        entero:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); :}
        | caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); :}
        //| caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a); :}
        | rtrue {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); :}
        | rfalse {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); :}
        | doble:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); :}
        | cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a.replace("\"","")); :}
        //| cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a); :}
        | rnull {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.nulo)); :}

        | id:a {: RESULT = new Id(a, aleft,aright); :}
        
        | E:a mas E:b{:RESULT = new suma(aleft,aright, a, b); :}
        | E:a menos E:b {: RESULT = new resta(aleft,aright,a,b);:}
        | E:a por E:b {: RESULT = new multiplicacion(aleft, aright, a, b);:}
        | E:a division E:b {: RESULT = new division(aleft, aright, a, b);:}
        | E:a rpow E:b {: RESULT = new potencia(aleft, aright, a, b);:}
        | E:a modulo E:b {: RESULT = new modulo(aleft, aright, a, b);:}

        | id:a masmas {: RESULT= new incremento(aleft, aright, a);:}
        | id:a menosmenos {: RESULT = new decremento(aleft, aright, a); :}

        | E:a mayorque E:b {: RESULT = new Mayor(aleft, aright, a, b);:}
        | E:a menorque E:b {: RESULT = new Menor(aleft, aright, a, b);:}
        | E:a mayorigualque E:b {: RESULT = new MayorIgual(aleft, aright, a, b);:}
        | E:a menorigualque E:b {: RESULT = new MenorIgual(aleft, aright, a, b);:}
        | E:a igualigual E:b {: RESULT = new Igual(aleft, aright, a, b);:}
        | E:a diferenteque E:b {: RESULT = new Diferente(aleft, aright, a, b);:}
        
        | E:a ror E:b {:RESULT = new OpOr(aleft, aright, a, b);:}
        | E:a rand E:b {:RESULT = new OpAnd(aleft, aright, a, b);:}
        | E:a rxor E:b {:RESULT = new OpXor(aleft, aright, a, b);:}
        | rnot E:a {:RESULT = new OpNot(aleft, aright, a);:}
        | parizquierdo E:a parderecho {:RESULT=a;:}
        | umenos E:a {:RESULT = new Negativos(aleft, aright, a);:}
        
;



OP_COMPA ::=
        | E:a mayorque E:b {: RESULT = new Mayor(aleft, aright, a, b);:}
        | E:a menorque E:b {: RESULT = new Menor(aleft, aright, a, b);:}
        | E:a mayorigualque E:b {: RESULT = new MayorIgual(aleft, aright, a, b);:}
        | E:a menorigualque E:b {: RESULT = new MenorIgual(aleft, aright, a, b);:}
        | E:a igualigual E:b {: RESULT = new Igual(aleft, aright, a, b);:}
        | E:a diferenteque E:b {: RESULT = new Diferente(aleft, aright, a, b);:}
;

OP_LOGICA ::=
        | E:a ror E:b {:RESULT = new OpOr(aleft, aright, a, b);:}
        | E:a rand E:b {:RESULT = new OpAnd(aleft, aright, a, b);:}
        | E:a rxor E:b {:RESULT = new OpXor(aleft, aright, a, b);:}
        | rnot E:a {:RESULT = new OpNot(aleft, aright, a);:}

;


