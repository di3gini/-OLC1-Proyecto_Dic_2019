
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 23 19:53:32 CST 2019
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import arbol.AST;
import arbol.Expresion;
import arbol.Instruccion;
import arbol.entorno.*;
import arbol.entorno.Tipo.EnumTipo;
import arbol.expresiones.Id;
import arbol.expresiones.Literal;
import arbol.instrucciones.Asignacion;
import arbol.instrucciones.Declaracion;
import arbol.instrucciones.Imprimir;
import arbol.aritmetica.*;
import arbol.instrucciones.*;
import arbol.Logicas.*;
import arbol.Comparativas.*;
import arbol.Sentencias.*;
import java.util.LinkedList;
import javafx.scene.text.Text;
import GUI.EditorController;
import arbol.instrucciones.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 23 19:53:32 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\021\004\000\002\014\005" +
    "\000\002\014\003\000\002\015\007\000\002\017\011\000" +
    "\002\020\007\000\002\016\011\000\002\033\004\000\002" +
    "\033\003\000\002\032\006\000\002\032\005\000\002\025" +
    "\002\000\002\025\003\000\002\024\004\000\002\024\005" +
    "\000\002\005\006\000\002\005\004\000\002\022\011\000" +
    "\002\022\007\000\002\006\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\007\006\000\002\007\006\000\002\010\004" +
    "\000\002\011\004\000\002\012\010\000\002\013\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\004\000\002\026\004\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\005\000\002\026\004\000\002\027\002\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\030\002" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\042\016\005\017\011\020\016\021\040\022" +
    "\013\034\027\035\043\036\012\052\031\054\030\055\006" +
    "\061\036\062\045\114\033\123\014\124\042\001\002\000" +
    "\052\002\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\034\ufff3\035\ufff3\036\ufff3\052\ufff3\054\ufff3\055" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\114\ufff3\123\ufff3" +
    "\124\ufff3\001\002\000\004\034\uffdc\001\002\000\004\013" +
    "\237\001\002\000\052\002\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\034\ufffe\035\ufffe\036\ufffe\052" +
    "\ufffe\054\ufffe\055\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\114\ufffe\123\ufffe\124\ufffe\001\002\000\052\002\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\052\ufff1\054\ufff1\055\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\114\ufff1\123\ufff1\124\ufff1\001\002" +
    "\000\004\034\uffd9\001\002\000\004\010\234\001\002\000" +
    "\004\034\uffd8\001\002\000\004\010\232\001\002\000\004" +
    "\034\227\001\002\000\004\034\uffdb\001\002\000\004\013" +
    "\226\001\002\000\004\013\225\001\002\000\052\002\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\052\ufff2\054\ufff2\055\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\114\ufff2\123\ufff2\124\ufff2\001" +
    "\002\000\052\002\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\034\ufff6\035\ufff6\036\ufff6\052\ufff6\054" +
    "\ufff6\055\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\114\ufff6" +
    "\123\ufff6\124\ufff6\001\002\000\054\002\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\034\uffee\035\uffee" +
    "\036\uffee\052\uffee\053\216\054\uffee\055\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\114\uffee\123\uffee\124\uffee\001\002" +
    "\000\004\013\215\001\002\000\004\013\214\001\002\000" +
    "\052\002\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\034\ufff4\035\ufff4\036\ufff4\052\ufff4\054\ufff4\055" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\114\ufff4\123\ufff4" +
    "\124\ufff4\001\002\000\010\012\211\067\210\070\212\001" +
    "\002\000\004\010\204\001\002\000\004\010\200\001\002" +
    "\000\052\002\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\034\ufff5\035\ufff5\036\ufff5\052\ufff5\054\ufff5" +
    "\055\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\114\ufff5\123" +
    "\ufff5\124\ufff5\001\002\000\004\010\174\001\002\000\004" +
    "\013\173\001\002\000\004\013\172\001\002\000\004\014" +
    "\161\001\002\000\004\013\157\001\002\000\004\034\uffda" +
    "\001\002\000\044\002\000\016\005\017\011\020\016\021" +
    "\040\022\013\034\027\035\043\036\012\052\031\054\030" +
    "\055\006\061\036\062\045\114\033\123\014\124\042\001" +
    "\002\000\004\010\152\001\002\000\004\010\147\001\002" +
    "\000\004\002\146\001\002\000\004\010\046\001\002\000" +
    "\030\010\047\026\057\027\060\030\054\031\061\032\051" +
    "\033\056\034\050\051\053\113\055\125\052\001\002\000" +
    "\030\010\047\026\057\027\060\030\054\031\061\032\051" +
    "\033\056\034\050\051\053\113\055\125\052\001\002\000" +
    "\054\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\013\uffca" +
    "\024\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\057\uffca\065\uffca\067\142" +
    "\070\143\071\uffca\001\002\000\050\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\013\uffcc\024\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\057\uffcc\065\uffcc\071\uffcc\001\002\000\030\010\047" +
    "\026\057\027\060\030\054\031\061\032\051\033\056\034" +
    "\050\051\053\113\055\125\052\001\002\000\030\010\047" +
    "\026\057\027\060\030\054\031\061\032\051\033\056\034" +
    "\050\051\053\113\055\125\052\001\002\000\050\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\011\uffcf\013\uffcf\024\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\057\uffcf\065\uffcf\071\uffcf\001\002\000" +
    "\050\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\013\uffcb" +
    "\024\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\057\uffcb\065\uffcb\071\uffcb" +
    "\001\002\000\050\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\013\uffd0\024\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\057\uffd0\065" +
    "\uffd0\071\uffd0\001\002\000\050\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\013\uffd1\024\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\057\uffd1\065\uffd1\071\uffd1\001\002\000\050\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\013\uffcd\024\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\057\uffcd\065\uffcd\071\uffcd\001\002\000\050" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\013\uffce\024" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\057\uffce\065\uffce\071\uffce\001" +
    "\002\000\042\004\101\005\067\006\077\007\072\011\064" +
    "\040\102\041\066\042\071\043\063\044\070\045\073\046" +
    "\065\047\075\050\076\057\074\071\100\001\002\000\030" +
    "\010\047\026\057\027\060\030\054\031\061\032\051\033" +
    "\056\034\050\051\053\113\055\125\052\001\002\000\004" +
    "\014\121\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\050\004\101\005\067\006\077\007" +
    "\072\011\uffc0\013\uffc0\024\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\057" +
    "\074\065\uffc0\071\100\001\002\000\050\004\uffc9\005\uffc9" +
    "\006\077\007\072\011\uffc9\013\uffc9\024\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\057\074\065\uffc9\071\100\001\002\000\050\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013\uffc5\024\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\057\uffc5\065\uffc5\071\uffc5\001\002" +
    "\000\050\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013" +
    "\uffc7\024\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\057\uffc7\065\uffc7\071" +
    "\100\001\002\000\050\004\101\005\067\006\077\007\072" +
    "\011\uffb9\013\uffb9\024\uffb9\040\102\041\066\042\071\043" +
    "\063\044\070\045\073\046\uffb9\047\uffb9\050\uffb9\057\074" +
    "\065\uffb9\071\100\001\002\000\050\004\101\005\067\006" +
    "\077\007\072\011\uffba\013\uffba\024\uffba\040\102\041\066" +
    "\042\071\043\063\044\070\045\073\046\uffba\047\uffba\050" +
    "\076\057\074\065\uffba\071\100\001\002\000\050\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\011\uffc4\013\uffc4\024\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\057\uffc4\065\uffc4\071\100\001\002\000" +
    "\050\004\101\005\067\006\077\007\072\011\uffbc\013\uffbc" +
    "\024\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\057\074\065\uffbc\071\100" +
    "\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\013\uffc6\024\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\057\uffc6\065" +
    "\uffc6\071\100\001\002\000\050\004\101\005\067\006\077" +
    "\007\072\011\uffbe\013\uffbe\024\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\057\074\065\uffbe\071\100\001\002\000\050\004\101\005" +
    "\067\006\077\007\072\011\uffbd\013\uffbd\024\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\057\074\065\uffbd\071\100\001\002\000\050" +
    "\004\uffc8\005\uffc8\006\077\007\072\011\uffc8\013\uffc8\024" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\057\074\065\uffc8\071\100\001" +
    "\002\000\050\004\101\005\067\006\077\007\072\011\uffc1" +
    "\013\uffc1\024\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\057\074\065\uffc1" +
    "\071\100\001\002\000\050\004\101\005\067\006\077\007" +
    "\072\011\uffbb\013\uffbb\024\uffbb\040\102\041\066\042\071" +
    "\043\063\044\070\045\073\046\uffbb\047\075\050\076\057" +
    "\074\065\uffbb\071\100\001\002\000\006\063\124\064\123" +
    "\001\002\000\010\015\135\063\124\064\123\001\002\000" +
    "\004\065\133\001\002\000\030\010\047\026\057\027\060" +
    "\030\054\031\061\032\051\033\056\034\050\051\053\113" +
    "\055\125\052\001\002\000\010\015\uffe8\063\uffe8\064\uffe8" +
    "\001\002\000\042\004\101\005\067\006\077\007\072\040" +
    "\102\041\066\042\071\043\063\044\070\045\073\046\065" +
    "\047\075\050\076\057\074\065\127\071\100\001\002\000" +
    "\050\015\uffe5\016\005\017\011\020\016\021\040\022\013" +
    "\034\027\035\043\036\012\052\031\054\030\055\006\061" +
    "\036\062\045\063\uffe5\064\uffe5\114\033\123\014\124\042" +
    "\001\002\000\010\015\uffe7\063\uffe7\064\uffe7\001\002\000" +
    "\050\015\uffe4\016\005\017\011\020\016\021\040\022\013" +
    "\034\027\035\043\036\012\052\031\054\030\055\006\061" +
    "\036\062\045\063\uffe4\064\uffe4\114\033\123\014\124\042" +
    "\001\002\000\052\002\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\022\uffff\034\uffff\035\uffff\036\uffff\052\uffff" +
    "\054\uffff\055\uffff\061\uffff\062\uffff\063\uffff\064\uffff\114" +
    "\uffff\123\uffff\124\uffff\001\002\000\050\015\uffe5\016\005" +
    "\017\011\020\016\021\040\022\013\034\027\035\043\036" +
    "\012\052\031\054\030\055\006\061\036\062\045\063\uffe5" +
    "\064\uffe5\114\033\123\014\124\042\001\002\000\010\015" +
    "\uffe6\063\uffe6\064\uffe6\001\002\000\052\002\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\034\uffea\035" +
    "\uffea\036\uffea\052\uffea\054\uffea\055\uffea\061\uffea\062\uffea" +
    "\063\uffea\064\uffea\114\uffea\123\uffea\124\uffea\001\002\000" +
    "\010\015\uffe9\063\uffe9\064\uffe9\001\002\000\050\004\101" +
    "\005\067\006\077\007\072\011\uffbf\013\uffbf\024\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\057\074\065\uffbf\071\100\001\002\000" +
    "\050\004\101\005\067\006\077\007\072\011\uffb8\013\uffb8" +
    "\024\uffb8\040\102\041\066\042\071\043\063\044\070\045" +
    "\073\046\uffb8\047\uffb8\050\uffb8\057\074\065\uffb8\071\100" +
    "\001\002\000\050\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\013\uffb6\024\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\057\uffb6\065" +
    "\uffb6\071\uffb6\001\002\000\050\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\011\uffc3\013\uffc3\024\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\057\uffc3\065\uffc3\071\uffc3\001\002\000\050\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\011\uffc2\013\uffc2\024\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\057\uffc2\065\uffc2\071\uffc2\001\002\000\042" +
    "\004\101\005\067\006\077\007\072\011\145\040\102\041" +
    "\066\042\071\043\063\044\070\045\073\046\065\047\075" +
    "\050\076\057\074\071\100\001\002\000\050\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7\024\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\057\uffb7\065\uffb7\071\uffb7\001\002\000\004" +
    "\002\001\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\042\004\101\005\067\006\077\007" +
    "\072\011\151\040\102\041\066\042\071\043\063\044\070" +
    "\045\073\046\065\047\075\050\076\057\074\071\100\001" +
    "\002\000\004\013\uffd7\001\002\000\030\010\047\026\057" +
    "\027\060\030\054\031\061\032\051\033\056\034\050\051" +
    "\053\113\055\125\052\001\002\000\042\004\101\005\067" +
    "\006\077\007\072\024\154\040\102\041\066\042\071\043" +
    "\063\044\070\045\073\046\065\047\075\050\076\057\074" +
    "\071\100\001\002\000\030\010\047\026\057\027\060\030" +
    "\054\031\061\032\051\033\056\034\050\051\053\113\055" +
    "\125\052\001\002\000\042\004\101\005\067\006\077\007" +
    "\072\011\156\040\102\041\066\042\071\043\063\044\070" +
    "\045\073\046\065\047\075\050\076\057\074\071\100\001" +
    "\002\000\004\013\uffd3\001\002\000\052\002\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\052\ufff9\054\ufff9\055\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\114\ufff9\123\ufff9\124\ufff9\001\002\000" +
    "\004\054\165\001\002\000\044\015\163\016\005\017\011" +
    "\020\016\021\040\022\013\034\027\035\043\036\012\052" +
    "\031\054\030\055\006\061\036\062\045\114\033\123\014" +
    "\124\042\001\002\000\044\015\164\016\005\017\011\020" +
    "\016\021\040\022\013\034\027\035\043\036\012\052\031" +
    "\054\030\055\006\061\036\062\045\114\033\123\014\124" +
    "\042\001\002\000\054\002\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\034\uffe3\035\uffe3\036\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\114\uffe3\123\uffe3\124\uffe3\001\002\000\054\002" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\114\uffe2\123\uffe2" +
    "\124\uffe2\001\002\000\004\010\166\001\002\000\030\010" +
    "\047\026\057\027\060\030\054\031\061\032\051\033\056" +
    "\034\050\051\053\113\055\125\052\001\002\000\042\004" +
    "\101\005\067\006\077\007\072\011\170\040\102\041\066" +
    "\042\071\043\063\044\070\045\073\046\065\047\075\050" +
    "\076\057\074\071\100\001\002\000\004\013\171\001\002" +
    "\000\052\002\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\034\uffec\035\uffec\036\uffec\052\uffec\054\uffec" +
    "\055\uffec\061\uffec\062\uffec\063\uffec\064\uffec\114\uffec\123" +
    "\uffec\124\uffec\001\002\000\052\002\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\052\ufff7\054\ufff7\055\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\114\ufff7\123\ufff7\124\ufff7\001\002\000\052\002" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\052\ufffa\054\ufffa\055\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\114\ufffa\123\ufffa\124\ufffa" +
    "\001\002\000\030\010\047\026\057\027\060\030\054\031" +
    "\061\032\051\033\056\034\050\051\053\113\055\125\052" +
    "\001\002\000\042\004\101\005\067\006\077\007\072\011" +
    "\176\040\102\041\066\042\071\043\063\044\070\045\073" +
    "\046\065\047\075\050\076\057\074\071\100\001\002\000" +
    "\004\013\177\001\002\000\052\002\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\052\uffeb\054\uffeb\055\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\114\uffeb\123\uffeb\124\uffeb\001\002\000\030\010" +
    "\047\026\057\027\060\030\054\031\061\032\051\033\056" +
    "\034\050\051\053\113\055\125\052\001\002\000\042\004" +
    "\101\005\067\006\077\007\072\011\202\040\102\041\066" +
    "\042\071\043\063\044\070\045\073\046\065\047\075\050" +
    "\076\057\074\071\100\001\002\000\004\014\161\001\002" +
    "\000\054\002\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\034\uffde\035\uffde\036\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\061\uffde\062\uffde\063\uffde\064\uffde\114" +
    "\uffde\123\uffde\124\uffde\001\002\000\030\010\047\026\057" +
    "\027\060\030\054\031\061\032\051\033\056\034\050\051" +
    "\053\113\055\125\052\001\002\000\042\004\101\005\067" +
    "\006\077\007\072\011\206\040\102\041\066\042\071\043" +
    "\063\044\070\045\073\046\065\047\075\050\076\057\074" +
    "\071\100\001\002\000\004\014\161\001\002\000\052\002" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\034\uffed\035\uffed\036\uffed\052\uffed\054\uffed\055\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\114\uffed\123\uffed\124\uffed" +
    "\001\002\000\004\013\uffd5\001\002\000\030\010\047\026" +
    "\057\027\060\030\054\031\061\032\051\033\056\034\050" +
    "\051\053\113\055\125\052\001\002\000\004\013\uffd4\001" +
    "\002\000\042\004\101\005\067\006\077\007\072\013\uffdd" +
    "\040\102\041\066\042\071\043\063\044\070\045\073\046" +
    "\065\047\075\050\076\057\074\071\100\001\002\000\052" +
    "\002\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\052\ufffc\054\ufffc\055\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\114\ufffc\123\ufffc\124" +
    "\ufffc\001\002\000\052\002\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\034\ufff8\035\ufff8\036\ufff8\052" +
    "\ufff8\054\ufff8\055\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\114\ufff8\123\ufff8\124\ufff8\001\002\000\006\014\161\052" +
    "\217\001\002\000\004\010\221\001\002\000\052\002\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\034" +
    "\uffef\035\uffef\036\uffef\052\uffef\054\uffef\055\uffef\061\uffef" +
    "\062\uffef\063\uffef\064\uffef\114\uffef\123\uffef\124\uffef\001" +
    "\002\000\030\010\047\026\057\027\060\030\054\031\061" +
    "\032\051\033\056\034\050\051\053\113\055\125\052\001" +
    "\002\000\042\004\101\005\067\006\077\007\072\011\223" +
    "\040\102\041\066\042\071\043\063\044\070\045\073\046" +
    "\065\047\075\050\076\057\074\071\100\001\002\000\004" +
    "\014\161\001\002\000\054\002\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\114\uffdf\123\uffdf\124\uffdf\001\002\000\052" +
    "\002\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\052\ufffb\054\ufffb\055\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\114\ufffb\123\ufffb\124" +
    "\ufffb\001\002\000\052\002\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\034\ufffd\035\ufffd\036\ufffd\052" +
    "\ufffd\054\ufffd\055\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\114\ufffd\123\ufffd\124\ufffd\001\002\000\006\012\230\013" +
    "\uffe0\001\002\000\030\010\047\026\057\027\060\030\054" +
    "\031\061\032\051\033\056\034\050\051\053\113\055\125" +
    "\052\001\002\000\042\004\101\005\067\006\077\007\072" +
    "\013\uffe1\040\102\041\066\042\071\043\063\044\070\045" +
    "\073\046\065\047\075\050\076\057\074\071\100\001\002" +
    "\000\004\011\233\001\002\000\004\013\uffd2\001\002\000" +
    "\030\010\047\026\057\027\060\030\054\031\061\032\051" +
    "\033\056\034\050\051\053\113\055\125\052\001\002\000" +
    "\042\004\101\005\067\006\077\007\072\011\236\040\102" +
    "\041\066\042\071\043\063\044\070\045\073\046\065\047" +
    "\075\050\076\057\074\071\100\001\002\000\004\013\uffd6" +
    "\001\002\000\052\002\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\034\ufff0\035\ufff0\036\ufff0\052\ufff0" +
    "\054\ufff0\055\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\114" +
    "\ufff0\123\ufff0\124\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\046\002\043\003\040\004\006\005\016\006" +
    "\024\007\017\010\033\011\036\012\023\013\034\014\021" +
    "\015\031\016\020\017\025\020\003\021\007\022\022\031" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\131\005\016\006\024\007" +
    "\017\010\033\011\036\012\023\013\034\014\021\015\031" +
    "\016\020\017\025\020\003\021\007\022\022\031\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\061\001\001\000\004\026" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\140\001\001\000\004\026\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\136\001\001\000\002\001\001\000\004\026\117" +
    "\001\001\000\004\026\116\001\001\000\004\026\115\001" +
    "\001\000\004\026\114\001\001\000\004\026\113\001\001" +
    "\000\004\026\112\001\001\000\004\026\111\001\001\000" +
    "\004\026\110\001\001\000\004\026\107\001\001\000\004" +
    "\026\106\001\001\000\004\026\105\001\001\000\004\026" +
    "\104\001\001\000\004\026\103\001\001\000\004\026\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\124\033\121\001" +
    "\001\000\004\032\135\001\001\000\002\001\001\000\004" +
    "\026\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\130\004\006\005\016\006\024\007\017\010\033" +
    "\011\036\012\023\013\034\014\021\015\031\016\020\017" +
    "\025\020\003\021\007\022\022\025\127\031\014\001\001" +
    "\000\002\001\001\000\042\004\131\005\016\006\024\007" +
    "\017\010\033\011\036\012\023\013\034\014\021\015\031" +
    "\016\020\017\025\020\003\021\007\022\022\031\014\001" +
    "\001\000\002\001\001\000\046\003\130\004\006\005\016" +
    "\006\024\007\017\010\033\011\036\012\023\013\034\014" +
    "\021\015\031\016\020\017\025\020\003\021\007\022\022" +
    "\025\133\031\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\152\001\001\000\002\001\001\000\004\026\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\161\004\006\005\016" +
    "\006\024\007\017\010\033\011\036\012\023\013\034\014" +
    "\021\015\031\016\020\017\025\020\003\021\007\022\022" +
    "\031\014\001\001\000\042\004\131\005\016\006\024\007" +
    "\017\010\033\011\036\012\023\013\034\014\021\015\031" +
    "\016\020\017\025\020\003\021\007\022\022\031\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\200\001\001\000\002" +
    "\001\001\000\004\024\202\001\001\000\002\001\001\000" +
    "\004\026\204\001\001\000\002\001\001\000\004\024\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\221\001\001" +
    "\000\002\001\001\000\004\024\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            Text texto = new Text("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".\n");
            EditorController.imprimir(texto);
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

            //Interfaz.lista_errores.add(new CError("Sintáctico", "No se esperaba este componente '" + s.value + "'", s.left, s.right));
    
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            Text texto = new Text("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido. \n");
            EditorController.imprimir(texto);
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_LOGICA ::= rnot E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpNot(aleft, aright, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_LOGICA ::= E rxor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpXor(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_LOGICA ::= E rand E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpAnd(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_LOGICA ::= E ror E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpOr(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_LOGICA ::= 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_COMPA ::= E diferenteque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Diferente(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_COMPA ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Igual(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_COMPA ::= E menorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgual(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_COMPA ::= E mayorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgual(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_COMPA ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Menor(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_COMPA ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Mayor(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_COMPA ::= 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= umenos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Negativos(aleft, aright, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= parizquierdo E parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= rnot E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpNot(aleft, aright, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E rxor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpXor(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E rand E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpAnd(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E ror E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new OpOr(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Diferente(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Igual(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E menorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgual(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E mayorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgual(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Menor(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Mayor(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new decremento(aleft, aright, a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new incremento(aleft, aright, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new modulo(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E rpow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new potencia(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E division E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new division(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new multiplicacion(aleft, aright, a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new resta(aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new suma(aleft,aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Id(a, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= rnull 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.nulo)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a.replace("\"","")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= doble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= rfalse 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= rtrue 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // GRAFICAR_ENT ::= rgraphent parizquierdo parderecho 
            {
              Instruccion RESULT =null;
		RESULT = new GrafEntornos();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAR_ENT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GRAFICAR_DOT ::= rgraphdot parizquierdo E coma E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new GrafDot(aright,aleft,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAR_DOT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECREMENTO ::= id menosmenos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Decre(a,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECREMENTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INCREMENTO ::= id masmas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Incre(a,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMPRIMIR ::= rprint parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Imprimir(a, false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IMPRIMIR ::= rprintln parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Imprimir(a, true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.cadena); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // T ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.doble); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // T ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.booleano); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.caracter); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= rint 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.entero); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= id igual E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_CONDICIONES ::= rif parizquierdo E parderecho BLOQUE 
            {
              LinkedList<Condiciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(new Condiciones(a,b));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CONDICIONES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_CONDICIONES ::= L_CONDICIONES relse rif parizquierdo E parderecho BLOQUE 
            {
              LinkedList<Condiciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Condiciones> a = (LinkedList<Condiciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; RESULT.add(new Condiciones(b,c));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CONDICIONES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T id 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(a,b,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T id igual E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,b,c,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE ::= llaveizq L_INSTRUCCIONES llaveder 
            {
              Bloque RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Bloque(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE ::= llaveizq llaveder 
            {
              Bloque RESULT =null;
		RESULT=new Bloque();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOQUE_SWITCH ::= L_INSTRUCCIONES 
            {
              BloqueSwitch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new BloqueSwitch(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE_SWITCH ::= 
            {
              BloqueSwitch RESULT =null;
		RESULT=new BloqueSwitch();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASO ::= rdefault dospuntos BLOQUE_SWITCH 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		BloqueSwitch a = (BloqueSwitch)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Caso(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASO ::= rcase E dospuntos BLOQUE_SWITCH 
            {
              Caso RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		BloqueSwitch c = (BloqueSwitch)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Caso(b,c,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASOS ::= CASO 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(new Casos(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASOS ::= CASOS CASO 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(new Casos(b));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_SWITCH ::= rswitch parizquierdo E parderecho llaveizq CASOS llaveder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Switch(a,b,aleft,bleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IMPORT ::= rimport parizquierdo E parderecho puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Import(aleft, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPORT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_DO_WHILE ::= rdo BLOQUE rwhile parizquierdo E parderecho puntoycoma 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new DoWhile(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_WHILE ::= rwhile parizquierdo E parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new While(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_IF ::= L_CONDICIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Condiciones> a = (LinkedList<Condiciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new IF(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_IF ::= L_CONDICIONES relse BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Condiciones> a = (LinkedList<Condiciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new IF(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_BREAK ::= rbreak puntoycoma 
            {
              Instruccion RESULT =null;
		RESULT=new Break();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SENTENCIA_BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SENTENCIA_SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SENTENCIA_IMPORT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SENTENCIA_DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= GRAFICAR_ENT puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= GRAFICAR_DOT puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECREMENTO puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INCREMENTO puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_INSTRUCCIONES ::= L_INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    parser.AST = new AST(a);
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

