/* The following code was generated by JFlex 1.6.1 */

package analizadores;
import java_cup.runtime.Symbol; 



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO_MULTI = 2;
  public static final int ESTADO_CADENA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  6,  8,  8,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    10, 21, 12,  0,  0, 15, 23,  5, 16, 17, 11, 13, 25, 14,  4,  9, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 29, 26, 19, 18, 20, 30, 
     0,  1,  1, 57, 55,  1,  1,  1,  1, 56,  1,  1,  1,  1,  1,  1, 
     1,  1,  1, 46,  1,  1,  1,  1,  1,  1,  1, 31,  0, 32, 24,  3, 
     0, 44, 39, 42, 36, 41, 52, 47, 43, 33,  1, 54, 40, 58, 34, 37, 
    51,  1, 45, 48, 35, 38, 50, 53, 49,  1,  1, 27, 22, 28,  0,  0, 
     0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\1\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\20\2"+
    "\2\6\1\34\1\35\4\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\2\1\50"+
    "\6\2\1\51\30\2\1\52\1\53\1\54\1\5\1\55"+
    "\3\2\1\56\25\2\1\57\7\2\1\60\5\2\1\61"+
    "\3\2\1\62\1\63\4\2\1\64\3\2\1\65\1\66"+
    "\2\2\1\67\5\2\1\70\13\2\1\71\4\2\1\72"+
    "\2\2\1\73\4\2\1\74\1\2\1\75\2\2\1\76"+
    "\2\2\1\77\1\100\1\101\2\2\1\102\1\2\1\103"+
    "\1\104\5\2\1\105\1\2\1\106\1\107\1\110\1\111"+
    "\7\2\1\112\1\113\1\114\4\2\1\115\1\116\3\2"+
    "\1\117\1\120\1\121\5\2\1\122\1\2\1\123\1\2"+
    "\1\124\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\261"+
    "\0\u019d\0\261\0\u01d8\0\u0213\0\u024e\0\261\0\u0289\0\u02c4"+
    "\0\261\0\261\0\261\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb"+
    "\0\u0426\0\261\0\261\0\261\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\261\0\u0811\0\261\0\261\0\u084c\0\u0162"+
    "\0\u0887\0\u08c2\0\261\0\261\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\u08fd\0\354\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\261\0\u084c\0\261"+
    "\0\u105d\0\354\0\u1098\0\u10d3\0\u110e\0\354\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\354\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\354\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\354\0\u18e4\0\u191f\0\u195a\0\354\0\354\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\354\0\u1a81\0\u1abc\0\u1af7\0\354"+
    "\0\354\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\354\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\354\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\354\0\u207f\0\u20ba\0\354\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\354\0\u21e1\0\354\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\354\0\354\0\354\0\u2343\0\u237e\0\354"+
    "\0\u23b9\0\354\0\354\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\354\0\u251b\0\354\0\354\0\354\0\354\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\354\0\354\0\354"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\354\0\354\0\u27df\0\u281a"+
    "\0\u2855\0\354\0\354\0\354\0\u2890\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\354\0\u29b7\0\354\0\u29f2\0\354\0\354\0\354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\0\1\14\1\13\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\5\1\47\1\5"+
    "\1\50\1\51\1\5\1\52\1\53\1\54\1\55\1\56"+
    "\1\5\1\57\1\60\1\61\1\62\5\5\6\63\1\12"+
    "\1\13\1\0\1\63\1\13\1\64\57\63\6\65\3\0"+
    "\3\65\1\66\56\65\74\0\3\5\35\0\32\5\2\0"+
    "\1\6\1\0\1\67\67\0\2\5\1\70\35\0\32\5"+
    "\6\71\3\0\62\71\7\0\1\13\2\0\1\13\71\0"+
    "\1\72\1\0\1\73\72\0\1\74\74\0\1\75\73\0"+
    "\1\76\76\0\1\77\72\0\1\100\72\0\1\101\72\0"+
    "\1\102\76\0\1\103\73\0\1\104\44\0\3\5\35\0"+
    "\1\5\1\105\21\5\1\106\5\5\1\107\1\0\3\5"+
    "\35\0\5\5\1\110\2\5\1\111\21\5\1\0\3\5"+
    "\35\0\4\5\1\112\5\5\1\113\1\5\1\114\15\5"+
    "\1\0\3\5\35\0\4\5\1\115\3\5\1\116\21\5"+
    "\1\0\3\5\35\0\4\5\1\117\7\5\1\120\15\5"+
    "\1\0\3\5\35\0\7\5\1\121\10\5\1\122\11\5"+
    "\1\0\3\5\35\0\4\5\1\123\2\5\1\124\2\5"+
    "\1\125\1\126\16\5\1\0\3\5\35\0\6\5\1\127"+
    "\23\5\1\0\3\5\35\0\10\5\1\130\21\5\1\0"+
    "\3\5\35\0\2\5\1\131\27\5\1\0\3\5\35\0"+
    "\14\5\1\132\15\5\1\0\3\5\35\0\2\5\1\133"+
    "\2\5\1\134\16\5\1\135\5\5\1\0\3\5\35\0"+
    "\4\5\1\136\25\5\1\0\3\5\35\0\5\5\1\137"+
    "\6\5\1\140\15\5\1\0\3\5\35\0\1\141\3\5"+
    "\1\142\6\5\1\143\16\5\1\0\3\5\35\0\12\5"+
    "\1\144\1\5\1\145\15\5\11\0\1\146\63\0\1\147"+
    "\75\0\1\150\65\0\6\72\1\12\1\151\1\0\62\72"+
    "\1\0\3\5\35\0\2\5\1\152\14\5\1\153\12\5"+
    "\1\0\3\5\35\0\22\5\1\154\7\5\1\0\3\5"+
    "\35\0\7\5\1\155\22\5\1\0\3\5\35\0\24\5"+
    "\1\156\5\5\1\0\3\5\35\0\26\5\1\157\1\160"+
    "\1\161\1\5\1\0\3\5\35\0\1\162\31\5\1\0"+
    "\3\5\35\0\5\5\1\163\24\5\1\0\3\5\35\0"+
    "\5\5\1\164\24\5\1\0\3\5\35\0\23\5\1\165"+
    "\6\5\1\0\3\5\35\0\4\5\1\166\25\5\1\0"+
    "\3\5\35\0\10\5\1\167\21\5\1\0\3\5\35\0"+
    "\17\5\1\170\12\5\1\0\3\5\35\0\2\5\1\171"+
    "\27\5\1\0\3\5\35\0\1\5\1\172\30\5\1\0"+
    "\3\5\35\0\13\5\1\173\16\5\1\0\3\5\35\0"+
    "\13\5\1\174\16\5\1\0\3\5\35\0\17\5\1\175"+
    "\12\5\1\0\3\5\35\0\17\5\1\176\12\5\1\0"+
    "\3\5\35\0\2\5\1\177\10\5\1\200\16\5\1\0"+
    "\3\5\35\0\14\5\1\201\15\5\1\0\3\5\35\0"+
    "\13\5\1\202\16\5\1\0\3\5\35\0\13\5\1\203"+
    "\1\204\15\5\1\0\3\5\35\0\22\5\1\205\7\5"+
    "\1\0\3\5\35\0\1\206\31\5\1\0\3\5\35\0"+
    "\1\207\31\5\1\0\3\5\35\0\6\5\1\210\23\5"+
    "\1\0\3\5\35\0\1\211\3\5\1\212\25\5\1\0"+
    "\3\5\35\0\1\5\1\213\30\5\1\0\3\5\35\0"+
    "\14\5\1\214\15\5\1\0\3\5\35\0\7\5\1\215"+
    "\22\5\1\0\3\5\35\0\1\216\31\5\1\0\3\5"+
    "\35\0\1\217\31\5\6\0\1\12\65\0\3\5\35\0"+
    "\2\5\1\220\27\5\1\0\3\5\35\0\4\5\1\221"+
    "\25\5\1\0\3\5\35\0\7\5\1\222\22\5\1\0"+
    "\3\5\35\0\4\5\1\223\25\5\1\0\3\5\35\0"+
    "\1\5\1\224\30\5\1\0\3\5\35\0\12\5\1\225"+
    "\17\5\1\0\3\5\35\0\17\5\1\226\12\5\1\0"+
    "\3\5\35\0\10\5\1\227\21\5\1\0\3\5\35\0"+
    "\6\5\1\230\23\5\1\0\3\5\35\0\13\5\1\231"+
    "\16\5\1\0\3\5\35\0\7\5\1\232\22\5\1\0"+
    "\3\5\35\0\13\5\1\233\16\5\1\0\3\5\35\0"+
    "\10\5\1\234\21\5\1\0\3\5\35\0\10\5\1\235"+
    "\21\5\1\0\3\5\35\0\2\5\1\236\27\5\1\0"+
    "\3\5\35\0\17\5\1\237\12\5\1\0\3\5\35\0"+
    "\14\5\1\240\15\5\1\0\3\5\35\0\10\5\1\241"+
    "\21\5\1\0\3\5\35\0\2\5\1\242\27\5\1\0"+
    "\3\5\35\0\5\5\1\243\24\5\1\0\3\5\35\0"+
    "\3\5\1\244\26\5\1\0\3\5\35\0\1\245\31\5"+
    "\1\0\3\5\35\0\22\5\1\246\7\5\1\0\3\5"+
    "\35\0\2\5\1\247\27\5\1\0\3\5\35\0\10\5"+
    "\1\250\21\5\1\0\3\5\35\0\2\5\1\251\27\5"+
    "\1\0\3\5\35\0\3\5\1\252\26\5\1\0\3\5"+
    "\35\0\7\5\1\253\22\5\1\0\3\5\35\0\1\5"+
    "\1\254\17\5\1\255\10\5\1\0\3\5\35\0\2\5"+
    "\1\256\27\5\1\0\3\5\35\0\13\5\1\257\16\5"+
    "\1\0\3\5\35\0\17\5\1\260\12\5\1\0\3\5"+
    "\35\0\7\5\1\261\22\5\1\0\3\5\35\0\2\5"+
    "\1\262\27\5\1\0\3\5\35\0\13\5\1\263\16\5"+
    "\1\0\3\5\35\0\14\5\1\264\15\5\1\0\3\5"+
    "\35\0\5\5\1\265\24\5\1\0\3\5\35\0\2\5"+
    "\1\266\27\5\1\0\3\5\35\0\13\5\1\267\16\5"+
    "\1\0\3\5\35\0\7\5\1\270\22\5\1\0\3\5"+
    "\35\0\5\5\1\271\24\5\1\0\3\5\35\0\10\5"+
    "\1\272\21\5\1\0\3\5\35\0\25\5\1\273\4\5"+
    "\1\0\3\5\35\0\1\5\1\274\30\5\1\0\3\5"+
    "\35\0\1\275\31\5\1\0\3\5\35\0\17\5\1\276"+
    "\12\5\1\0\3\5\35\0\14\5\1\277\15\5\1\0"+
    "\3\5\35\0\14\5\1\300\15\5\1\0\2\5\1\301"+
    "\35\0\32\5\1\0\3\5\35\0\1\5\1\302\30\5"+
    "\1\0\3\5\35\0\12\5\1\303\17\5\1\0\3\5"+
    "\35\0\1\304\31\5\1\0\3\5\35\0\14\5\1\305"+
    "\15\5\1\0\3\5\35\0\11\5\1\306\20\5\1\0"+
    "\3\5\35\0\1\307\31\5\1\0\3\5\35\0\2\5"+
    "\1\310\27\5\1\0\3\5\35\0\13\5\1\311\16\5"+
    "\1\0\3\5\35\0\10\5\1\312\21\5\1\0\3\5"+
    "\35\0\7\5\1\313\22\5\1\0\3\5\35\0\10\5"+
    "\1\314\21\5\1\0\3\5\35\0\10\5\1\315\21\5"+
    "\1\0\3\5\35\0\10\5\1\316\21\5\1\0\3\5"+
    "\35\0\1\5\1\317\30\5\1\0\3\5\35\0\2\5"+
    "\1\320\27\5\1\0\3\5\35\0\6\5\1\321\23\5"+
    "\1\0\3\5\35\0\14\5\1\322\15\5\1\0\3\5"+
    "\35\0\10\5\1\323\21\5\1\0\3\5\35\0\7\5"+
    "\1\324\22\5\1\0\3\5\35\0\13\5\1\325\16\5"+
    "\1\0\3\5\35\0\3\5\1\326\26\5\1\0\3\5"+
    "\35\0\1\5\1\327\30\5\1\0\3\5\35\0\13\5"+
    "\1\330\16\5\1\0\3\5\35\0\1\5\1\331\30\5"+
    "\1\0\3\5\35\0\23\5\1\332\6\5\1\0\3\5"+
    "\35\0\16\5\1\333\13\5\1\0\3\5\35\0\11\5"+
    "\1\334\20\5\1\0\3\5\35\0\12\5\1\335\17\5"+
    "\1\0\3\5\35\0\11\5\1\336\20\5\1\0\3\5"+
    "\35\0\2\5\1\337\4\5\1\340\22\5\1\0\3\5"+
    "\35\0\2\5\1\341\27\5\1\0\3\5\35\0\11\5"+
    "\1\342\20\5\1\0\2\5\1\343\35\0\32\5\1\0"+
    "\3\5\35\0\11\5\1\344\20\5\1\0\3\5\35\0"+
    "\7\5\1\345\22\5\1\0\3\5\35\0\2\5\1\346"+
    "\27\5\1\0\3\5\35\0\1\5\1\347\30\5\1\0"+
    "\3\5\35\0\17\5\1\350\12\5\1\0\3\5\35\0"+
    "\5\5\1\351\24\5\1\0\3\5\35\0\11\5\1\352"+
    "\20\5\1\0\3\5\35\0\1\353\31\5\1\0\3\5"+
    "\35\0\13\5\1\354\16\5\1\0\3\5\35\0\1\5"+
    "\1\355\30\5\1\0\3\5\35\0\10\5\1\356\21\5"+
    "\1\0\3\5\35\0\2\5\1\357\27\5\1\0\3\5"+
    "\35\0\23\5\1\360\6\5\1\0\3\5\35\0\10\5"+
    "\1\361\21\5\1\0\3\5\35\0\10\5\1\362\21\5"+
    "\1\0\3\5\35\0\10\5\1\363\21\5\1\0\3\5"+
    "\35\0\2\5\1\364\27\5\1\0\3\5\35\0\7\5"+
    "\1\365\22\5\1\0\3\5\35\0\6\5\1\366\23\5"+
    "\1\0\3\5\35\0\10\5\1\367\21\5\1\0\3\5"+
    "\35\0\1\370\31\5\1\0\3\5\35\0\4\5\1\371"+
    "\25\5\1\0\3\5\35\0\10\5\1\372\21\5\1\0"+
    "\3\5\35\0\7\5\1\373\22\5\1\0\3\5\35\0"+
    "\3\5\1\374\26\5\1\0\3\5\35\0\7\5\1\375"+
    "\22\5\1\0\3\5\35\0\23\5\1\376\6\5\1\0"+
    "\3\5\35\0\13\5\1\377\16\5\1\0\3\5\35\0"+
    "\10\5\1\u0100\21\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10797];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\3\11\6\1\11\11\20\1\1\11\1\1\2\11"+
    "\4\0\12\11\41\1\1\11\1\1\1\11\230\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String aux = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
    //Interfaz.lista_errores.add(new CError("Léxico", "Caractér incorrecto '" + yytext() + "'", yyline, yychar));
            }
          case 87: break;
          case 2: 
            { return new Symbol(sym.id,yyline,yychar, yytext());
            }
          case 88: break;
          case 3: 
            { return new Symbol(sym.entero,yyline,yychar, yytext());
            }
          case 89: break;
          case 4: 
            { return new Symbol(sym.punto,yyline,yychar, yytext());
            }
          case 90: break;
          case 5: 
            { yychar=1;
            }
          case 91: break;
          case 6: 
            { 
            }
          case 92: break;
          case 7: 
            { return new Symbol(sym.division,yyline,yychar, yytext());
            }
          case 93: break;
          case 8: 
            { return new Symbol(sym.por,yyline,yychar, yytext());
            }
          case 94: break;
          case 9: 
            { yybegin(ESTADO_CADENA); aux = "";
            }
          case 95: break;
          case 10: 
            { return new Symbol(sym.mas,yyline,yychar, yytext());
            }
          case 96: break;
          case 11: 
            { return new Symbol(sym.menos,yyline,yychar, yytext());
            }
          case 97: break;
          case 12: 
            { return new Symbol(sym.modulo,yyline,yychar, yytext());
            }
          case 98: break;
          case 13: 
            { return new Symbol(sym.parizquierdo,yyline,yychar, yytext());
            }
          case 99: break;
          case 14: 
            { return new Symbol(sym.parderecho,yyline,yychar, yytext());
            }
          case 100: break;
          case 15: 
            { return new Symbol(sym.igual,yyline,yychar, yytext());
            }
          case 101: break;
          case 16: 
            { return new Symbol(sym.menorque,yyline,yychar, yytext());
            }
          case 102: break;
          case 17: 
            { return new Symbol(sym.mayorque,yyline,yychar, yytext());
            }
          case 103: break;
          case 18: 
            { return new Symbol(sym.not,yyline,yychar, yytext());
            }
          case 104: break;
          case 19: 
            { return new Symbol(sym.xor,yyline,yychar, yytext());
            }
          case 105: break;
          case 20: 
            { return new Symbol(sym.coma,yyline,yychar, yytext());
            }
          case 106: break;
          case 21: 
            { return new Symbol(sym.puntoycoma,yyline,yychar, yytext());
            }
          case 107: break;
          case 22: 
            { return new Symbol(sym.llaveizq,yyline,yychar, yytext());
            }
          case 108: break;
          case 23: 
            { return new Symbol(sym.llaveder,yyline,yychar, yytext());
            }
          case 109: break;
          case 24: 
            { return new Symbol(sym.dospuntos,yyline,yychar, yytext());
            }
          case 110: break;
          case 25: 
            { return new Symbol(sym.interrogacion,yyline,yychar, yytext());
            }
          case 111: break;
          case 26: 
            { return new Symbol(sym.corizquierdo,yyline,yychar, yytext());
            }
          case 112: break;
          case 27: 
            { return new Symbol(sym.corderecho,yyline,yychar, yytext());
            }
          case 113: break;
          case 28: 
            { aux = aux + yytext();
            }
          case 114: break;
          case 29: 
            { yybegin(YYINITIAL); return new Symbol(sym.cadena,yyline,yychar,aux);
            }
          case 115: break;
          case 30: 
            { yybegin(COMENTARIO_MULTI);
            }
          case 116: break;
          case 31: 
            { return new Symbol(sym.rpow,yyline,yychar,yytext());
            }
          case 117: break;
          case 32: 
            { return new Symbol(sym.masmas,yyline,yychar, yytext());
            }
          case 118: break;
          case 33: 
            { return new Symbol(sym.menosmenos,yyline,yychar, yytext());
            }
          case 119: break;
          case 34: 
            { return new Symbol(sym.igualigual,yyline,yychar, yytext());
            }
          case 120: break;
          case 35: 
            { return new Symbol(sym.menorigualque,yyline,yychar, yytext());
            }
          case 121: break;
          case 36: 
            { return new Symbol(sym.mayorigualque,yyline,yychar, yytext());
            }
          case 122: break;
          case 37: 
            { return new Symbol(sym.diferenteque,yyline,yychar, yytext());
            }
          case 123: break;
          case 38: 
            { return new Symbol(sym.or,yyline,yychar, yytext());
            }
          case 124: break;
          case 39: 
            { return new Symbol(sym.and,yyline,yychar, yytext());
            }
          case 125: break;
          case 40: 
            { return new Symbol(sym.rif,yyline,yychar, yytext());
            }
          case 126: break;
          case 41: 
            { return new Symbol(sym.rdo,yyline,yychar, yytext());
            }
          case 127: break;
          case 42: 
            { yybegin(YYINITIAL);
            }
          case 128: break;
          case 43: 
            { return new Symbol(sym.doble,yyline,yychar, yytext());
            }
          case 129: break;
          case 44: 
            { return new Symbol(sym.caracter,yyline,yychar, yytext());
            }
          case 130: break;
          case 45: 
            { return new Symbol(sym.rint,yyline,yychar, yytext());
            }
          case 131: break;
          case 46: 
            { return new Symbol(sym.rnew,yyline,yychar, yytext());
            }
          case 132: break;
          case 47: 
            { return new Symbol(sym.rstr,yyline,yychar, yytext());
            }
          case 133: break;
          case 48: 
            { return new Symbol(sym.rfor,yyline,yychar, yytext());
            }
          case 134: break;
          case 49: 
            { return new Symbol(sym.rnull,yyline,yychar, yytext());
            }
          case 135: break;
          case 50: 
            { return new Symbol(sym.rthis,yyline,yychar, yytext());
            }
          case 136: break;
          case 51: 
            { return new Symbol(sym.rtrue,yyline,yychar, yytext());
            }
          case 137: break;
          case 52: 
            { return new Symbol(sym.relse,yyline,yychar, yytext());
            }
          case 138: break;
          case 53: 
            { return new Symbol(sym.rchar,yyline,yychar, yytext());
            }
          case 139: break;
          case 54: 
            { return new Symbol(sym.rcase,yyline,yychar, yytext());
            }
          case 140: break;
          case 55: 
            { return new Symbol(sym.rread,yyline,yychar, yytext());
            }
          case 141: break;
          case 56: 
            { return new Symbol(sym.rvoid,yyline,yychar, yytext());
            }
          case 142: break;
          case 57: 
            { return new Symbol(sym.rtoInt,yyline,yychar, yytext());
            }
          case 143: break;
          case 58: 
            { return new Symbol(sym.rbreak,yyline,yychar, yytext());
            }
          case 144: break;
          case 59: 
            { return new Symbol(sym.rclass,yyline,yychar, yytext());
            }
          case 145: break;
          case 60: 
            { return new Symbol(sym.rgraph,yyline,yychar, yytext());
            }
          case 146: break;
          case 61: 
            { return new Symbol(sym.rsuper,yyline,yychar, yytext());
            }
          case 147: break;
          case 62: 
            { return new Symbol(sym.rprint,yyline,yychar, yytext());
            }
          case 148: break;
          case 63: 
            { return new Symbol(sym.rfinal,yyline,yychar, yytext());
            }
          case 149: break;
          case 64: 
            { return new Symbol(sym.rfalse,yyline,yychar, yytext());
            }
          case 150: break;
          case 65: 
            { return new Symbol(sym.rwhile,yyline,yychar, yytext());
            }
          case 151: break;
          case 66: 
            { return new Symbol(sym.rimport,yyline,yychar, yytext());
            }
          case 152: break;
          case 67: 
            { return new Symbol(sym.rtoChar,yyline,yychar, yytext());
            }
          case 153: break;
          case 68: 
            { return new Symbol(sym.rdouble,yyline,yychar, yytext());
            }
          case 154: break;
          case 69: 
            { return new Symbol(sym.rreturn,yyline,yychar, yytext());
            }
          case 155: break;
          case 70: 
            { return new Symbol(sym.rstring,yyline,yychar, yytext());
            }
          case 156: break;
          case 71: 
            { return new Symbol(sym.rstatic,yyline,yychar, yytext());
            }
          case 157: break;
          case 72: 
            { return new Symbol(sym.rswitch,yyline,yychar, yytext());
            }
          case 158: break;
          case 73: 
            { return new Symbol(sym.rpublic,yyline,yychar, yytext());
            }
          case 159: break;
          case 74: 
            { return new Symbol(sym.rdefault,yyline,yychar, yytext());
            }
          case 160: break;
          case 75: 
            { return new Symbol(sym.rboolean,yyline,yychar, yytext());
            }
          case 161: break;
          case 76: 
            { return new Symbol(sym.rextends,yyline,yychar, yytext());
            }
          case 162: break;
          case 77: 
            { return new Symbol(sym.rprintln,yyline,yychar, yytext());
            }
          case 163: break;
          case 78: 
            { return new Symbol(sym.rprivate,yyline,yychar, yytext());
            }
          case 164: break;
          case 79: 
            { return new Symbol(sym.rtoDouble,yyline,yychar, yytext());
            }
          case 165: break;
          case 80: 
            { return new Symbol(sym.rcontinue,yyline,yychar, yytext());
            }
          case 166: break;
          case 81: 
            { return new Symbol(sym.rabstract,yyline,yychar, yytext());
            }
          case 167: break;
          case 82: 
            { return new Symbol(sym.rread_file,yyline,yychar, yytext());
            }
          case 168: break;
          case 83: 
            { return new Symbol(sym.rprotected,yyline,yychar, yytext());
            }
          case 169: break;
          case 84: 
            { return new Symbol(sym.rinstanceof,yyline,yychar, yytext());
            }
          case 170: break;
          case 85: 
            { return new Symbol(sym.rprinttabla,yyline,yychar, yytext());
            }
          case 171: break;
          case 86: 
            { return new Symbol(sym.rwrite_file,yyline,yychar, yytext());
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
